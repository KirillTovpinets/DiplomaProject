@model List<HtmlInputs.Models.Applications>
@{
    ViewBag.Title = "Заявления";
    Layout = "~/Views/Shared/_Layout.cshtml";

    DateTime temp = new DateTime();
    HtmlInputs.Models.DiplomEntities5 dc = new HtmlInputs.Models.DiplomEntities5();
    int numWeeks = 0;
    int[] numAppInWeek = new int[50];
    DateTime[] weeks = new DateTime[50];
    Dictionary<int,int> TotalNumApp = new Dictionary<int, int>();
    Dictionary<int,int> ConfNumApp = new Dictionary<int, int>();
    Dictionary<int,int> RejectedNumApp = new Dictionary<int, int>();
    int isSaved = 0;
    int hasApp = 0;
    int hasUnreadApp = 0;
    int WeekLimit = dc.Utility.Where(a => a.Id.Equals(2)).FirstOrDefault().Limit;
    int Overflow = 0;
    
    List<SelectListItem> ConfirmList = new List<SelectListItem>();
    var Conf = new SelectListItem { Text = "Не возражаю", Value = "1" };
    var Disp = new SelectListItem { Text = "Отказать", Value = "0" };
    ConfirmList.Add(Conf);
    ConfirmList.Add(Disp);
    }
    @using(Html.BeginForm("SaveChangesApp","Profile"))
    { 
    <div class="content">
        @if (ViewBag.Message != null)
        {
            <div style="color:green;" id="ToHide">
                @ViewBag.Message
            </div>
            <script type="text/javascript">
                var timer = setTimeout(function () {
                    var element = document.getElementById("ToHide");
                    element.classList.add("Hidden");
                    clearTimeout(timer);
                }, 1500);
            </script>
        }
    @{
        int numWeekToSave = 0;
        int isNotTheFirst = 0;
        foreach (HtmlInputs.Models.Applications item in dc.Applications.OrderByDescending(a => a.DateOfCreation)) //Разбиваем записи таблицы на недели. В массив записываем дату понедельника
        {
            if (item.Users.Group.ToString() != Session["GroupApp"].ToString() ||
                item.Users.Course.ToString() != Session["CourseApp"].ToString())
            {
                continue;
            }
            int num = 0;
            if(TotalNumApp.TryGetValue(item.Users.UserId, out num))
            {
                TotalNumApp[item.Users.UserId]++;
                if(item.isConfirmed == 1)
                {
                    ConfNumApp[item.Users.UserId]++;
                }
                else
                {
                    RejectedNumApp[item.Users.UserId]++;
                }
            }
            else
            {
                TotalNumApp.Add(item.Users.UserId, 1);
                ConfNumApp.Add(item.Users.UserId, 0);
                RejectedNumApp.Add(item.Users.UserId, 0);
                if (item.isConfirmed == 1)
                {
                    ConfNumApp[item.Users.UserId]++;
                }
                else
                {
                    RejectedNumApp[item.Users.UserId]++;
                }
            }
            hasApp = 1;
            temp = item.DateOfCreation;
            while (temp.Date.DayOfWeek != System.DayOfWeek.Monday)
            {
                temp = temp.Date.AddDays(-1);
            }
            foreach (DateTime savedWeeks in weeks)
            {
                if (savedWeeks == temp)
                {
                    isSaved = 1;
                    break;
                }
            }
                
            if (isSaved == 0)
            {
                if(isNotTheFirst == 0)
                { 
                    numAppInWeek[numWeekToSave]++;
                    isNotTheFirst = 1;
                }
                else
                {
                    numAppInWeek[++numWeekToSave]++;
                }
                weeks[numWeeks++] = temp;
            }
            else
            {
                numAppInWeek[numWeekToSave]++;
                isSaved = 0;
            }
            
        }
        
        for (int i = 0; i < numWeeks; i++)
        {
            int numApp = 0;
            if(numAppInWeek[i] > WeekLimit)
            {
                Overflow = numAppInWeek[i] - WeekLimit;
            }
            <div class="week">
        @weeks[i].Date.ToShortDateString() - @weeks[i].AddDays(5).Date.ToShortDateString()</div>
            foreach (HtmlInputs.Models.Applications app in @Model)
            {
                DateTime start = app.DateOfCreation;
                while (start.DayOfWeek != System.DayOfWeek.Monday)
                {
                    start = start.AddDays(-1);
                }
                if (start == weeks[i])
                {
                    string read;
                    int Overflowed = 0;
                    if (app.isRead == 0)
                    {
                        hasUnreadApp = 1;
                        read = "#b6d7b8";
                    }
                    else
                    { 
                        read = "#fff";
                    }
                    if(Overflow != 0)
                    {
                        Overflowed = 1;
                        Overflow--;
                    }
                    if(app.isConfirmed == 1)
                    {
                        ConfirmList[0].Selected = true;
                        ConfirmList[1].Selected = false;
                    }
                    else
                    {
                        ConfirmList[0].Selected = false;
                        ConfirmList[1].Selected = true;
                    }
                    <div class="application" style="; border-bottom:1px solid black; margin-bottom: 10px; background: @read;">
                        @if(Overflowed != 0)
                        { 
                        <div class="Warning">
                            <img src="~/Content/Warning.gif" width="30" height="30" />
                        </div>
                        <div class="Warning-info">
                            Превышен лимит заявлений в неделю.
                        </div>
                        }
                        <div class="wrapp">
                            <div class="app-confirm">
                                @{ 
                                    if(app.isRead == 0)
                                    { 
                                        @Html.DropDownListFor(a => a[numApp].isConfirmed, ConfirmList)<br />
                                    }
                                    else
                                    {
                                        if(app.isConfirmed == 1)
                                        {
                                            <span>Не возражаю</span><br />
                                        }
                                        else
                                        {
                                            <span>Отказать</span><br />
                                        }
                                    }
                                }
                                @if(app.isRead == 1)
                                { 
                                    <span>@app.Reader</span>
                                    <br />@app.DateOfRead.ToShortDateString()
                                }
                                @Html.HiddenFor(a => a[numApp].Id)
                                @Html.HiddenFor(a => a[numApp].isRead)
                                @{
                                    numApp++;
                                }
                                
                            </div>
                            <div class="app-head">
                                <div>@app.Head</div>
                                <label class="student">@app.Users.Sirname @(app.Users.Name.ToString().First()). @(app.Users.Patername.ToString().First()).</label>
                                <div class="info">
                                    Всего заявлений: @TotalNumApp[app.Users.UserId]<br />
                                    Одобрено: @ConfNumApp[app.Users.UserId]<br />
                                    Отклонено: @RejectedNumApp[app.Users.UserId]
                                </div>
                            </div>
                        </div>
                            <div class="app-title">Заявление</div>

                            <p>
                                Прошу разрешить мне отсутствовать на занятиях @app.DateOfMiss.ToShortDateString() @app.Reason
                            </p>

                            <div class="app-date">@app.DateOfCreation.ToShortDateString()</div>
                    </div>
                }
            }
        }
        if (hasApp == 0)
        {
            <div style="text-align:center;">В этой группе нет заявлений</div>
        }
    }
</div>
        <script>
            function ShowForm() {
                var element = document.getElementById("setLim-form");
                element.style.display = "block";
            }
            function HideForm() {
                var element = document.getElementById("form-message");
                element.style.display = "none";
            }
        </script>
<div class="miss-buttons">
    @if(hasUnreadApp == 1)
    { 
        <input type="submit" value="Сохранить" />
    }
    <input type="button" value="Установить лимит" onclick="ShowForm()"/>
    @if (Session["CourseApp"].ToString().Equals("1"))
    {
        <a href="~/Profile/CourseOneApp"><input type="button" value="Назад" /></a>
    }
    @if (Session["CourseApp"].ToString().Equals("2"))
    {
        <a href="~/Profile/CourseTwoApp"><input type="button" value="Назад" /></a>
    }
    @if (Session["CourseApp"].ToString().Equals("3"))
    {
        <a href="~/Profile/CourseThreeApp"><input type="button" value="Назад" /></a>
    }
    @if (Session["CourseApp"].ToString().Equals("4"))
    {
        <a href="~/Profile/CourseFourApp"><input type="button" value="Назад" /></a>
    }
    
</div>
    }
@using (Html.BeginForm("SetLim", "Profile", FormMethod.Get, new { @id = "setLim-form" }))
{
    <button onclick="HideForm()" class="close-btn">X</button>
    <input type="text" name="numApp" size="5" style="text-align:center;"/>
    <input type="submit" value="Установить" />
}




